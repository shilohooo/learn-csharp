<Window
    x:Class="Wpf.Animation.UsingInCSharp.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Title="WPF 动画之在CSharp代码中使用动画"
    Width="800"
    Height="450"
    mc:Ignorable="d">
    <!--
        动画的本质是在一段时间内输出一个值，我们要做的事情就是把这个值赋值到某个依赖属性上，然后触发这个动画。
        所以，要实现动画，可以简要分为3步：
        第一步，实例化一个目标对象
        第二步，实例化一个动画对象
        第三步，将动画对象输出的值赋值到目标对象的属性并启动该动画。
        前面两步由开发者完成，第三步由WPF来完成
        
        那么，WPF是如何启动一个动画的？
        在Animatable抽象基类中，有一个BeginAnimation()方法成员可以完成上述第三步的操作。
        BeginAnimation()方法成员表示开启一个动画，第一个参数dp表示要被动作作用的依赖属性，第二个参数animation表示一个动画实例。
        
        哪个对象调用了BeginAnimation()方法，哪个对象就是动画的目标对象
    -->
    <Grid
        x:Name="Grid"
        Background="Transparent"
        MouseUp="Grid_OnMouseUp">
        <Ellipse
            x:Name="Ellipse"
            Width="200"
            Height="200">
            <Ellipse.RenderTransform>
                <ScaleTransform CenterX="100" CenterY="100" />
            </Ellipse.RenderTransform>
            <Ellipse.Fill>
                <RadialGradientBrush
                    GradientOrigin="0.25 0.25"
                    RadiusX="0.75"
                    RadiusY="0.75">
                    <RadialGradientBrush.GradientStops>
                        <GradientStop Offset="0" Color="White" />
                        <GradientStop Offset="0.65" Color="Goldenrod" />
                        <GradientStop Offset="0.8" Color="Gray" />
                    </RadialGradientBrush.GradientStops>
                </RadialGradientBrush>
            </Ellipse.Fill>
        </Ellipse>
    </Grid>
</Window>
