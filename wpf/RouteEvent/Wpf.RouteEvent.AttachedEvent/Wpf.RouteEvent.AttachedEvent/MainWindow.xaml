<Window
    x:Class="Wpf.RouteEvent.AttachedEvent.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Wpf.RouteEvent.AttachedEvent.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:helper="clr-namespace:Wpf.RouteEvent.AttachedEvent.Mvvm"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Title="WPF 路由事件之附加事件"
    Width="800"
    Height="450"
    mc:Ignorable="d">

    <!--
        在非元素的类型中定义的路由事件，我们称为附加事件。所以，本质上讲，附加事件也是路由事件。
        附加事件虽然定义在非元素的类型中，但却是在元素类型中引发，并且通过元素树进行传播。
        附加事件其实与附加属性相似，但是不完全相同。定义附加事件时，分两个步骤，
        第一步是利用EventManager的RegisterRoutedEvent方法成员定义一个路由事件。
        
        public static readonly RoutedEvent 路由事件名称 = EventManager.RegisterRoutedEvent(
        name: "路由事件名称",
        routingStrategy: RoutingStrategy.Bubble / RoutingStrategy.Direct / RoutingStrategy.Tunnel,
        handlerType: 路由事件委托的反射实例,
        ownerType: 路由事件拥有者的反射实例
        )
        
        第二步是将路由事件名称包装一下，它的包装有点特别。
        public static void Add路由事件名称Handler(DependencyObject dependencyObject, RoutedEventHandler handler)
        {
        if (dependencyObject is UIElement uiElement)
        {
        uiElement.AddHandler(路由事件名称, handler);
        }
        }
        
        public static void Remove路由事件名称Handler(DependencyObject dependencyObject, RoutedEventHandler handler)
        {
        if (dependencyObject is UIElement uiElement)
        {
        uiElement.RemoveHandler(路由事件名称, handler);
        }
        }
        
        如此，WPF的事件系统便会通过内部反射机制知道开发者的意图。在添加和删除附加事件的定义中，
        第一个参数DependencyObject表示附加事件的宿主对象，第二个参数RoutedEventHandler表示一个委托，由外界传入，
        即当附加事件被触发时所执行的回调函数。
        
        最后一点，谁附加了一个附加事件，谁就负责触发和编写触发后的回调函数代码逻辑。
        通常是某个控件去附加一个事件，因为控件的基类都是UIElement类，
        而只有UIElement才具有添加路由事件、删除路由事件、触发路由事件的功能。
        UIElement.AddHandler()；添加一个路由事件；
        UIElement.RemoveHandler()；删除一个路由事件；
        UIElement.RaiseEvent()；触发一个路由事件；
    -->
    <Border Background="Transparent">
        <Canvas Background="Transparent">
            <controls:Widget
                Title="第四季度北美市场总销售额统计"
                Canvas.Left="120"
                Canvas.Top="20"
                Width="270"
                Height="100"
                helper:SalesManager.Check="Widget_OnCheck"
                Completed="Widget_OnCompleted"
                Target="1000000"
                Value="{Binding ElementName=Slider, Path=Value}" />
            <Slider
                x:Name="Slider"
                Canvas.Left="120"
                Canvas.Top="150"
                Width="250"
                Maximum="2000000"
                Value="0" />
            <ListBox
                x:Name="ListBox"
                Canvas.Left="120"
                Canvas.Top="200"
                Height="115" />
        </Canvas>
    </Border>
</Window>