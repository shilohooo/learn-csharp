<Window
    x:Class="Wpf.Xaml.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:Wpf.Xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    Title="MainWindow"
    Width="800"
    Height="450"
    mc:Ignorable="d">
    <!--
        在XAML中引用命名空间的语法是：
        xmlns:映射名="clr-namespace:类库中命名空间的名字;assembly=类库文件名"
        xmlns是用于在XAML中声明命名空间的Attribute，从XML语言继承而来（XML Namespace的缩写）。
        冒号后的映射名是可选的，但由于可以不加映射名的默认命名空间已经被WPF的主要命名空间占用，
        所以所引用的命名空间都需要加上这个映射名。映射名可以自由选择，
        建议使用类库中命名空间的原名或者缩写。
        引号中的字符串值确定了要引用的是哪个类库以及类库中的哪个命名空间。
        使用引用命名空间中的类的语法如下：
        <映射名：类名>.…</映射名：类名>

        x:Class特性告诉XAML编译器将编译结果和哪个C#编译的类合并，x:Class只能在XAML生产的根元素上指定,对于在XAML中具有父对象的任何对象无效
        mc:Ignorable命名空间提供了xaml处理器“忽略”的xaml定义，允许您指定设计者在设计时使用的信息（在运行时被忽略），
        如d:DesignHeight="725" d:DesignWidth="1015"

        如果没有写可选映射前缀，那就意味着所有来自于这个名称空间的标签前都不用加前缀，
        这个没有映射前缀的名称空间称为“默认名称空间”——默认名称空间只能有一个，
        而且应该选择其中元素被最频繁使用的名称空间来充当默认名称空间。

        x命名空间”的x是映射XML命名空间时给它取的名字（取XAML的首字母），
        里面的成员（如xClass、x:Name）是专门写给XAML编译器看、
        用来引导XAML编译器把XAML代码编译成CLR代码的。
    -->
    <Window.Resources>
        <!--  x:Key 的作用：唯一标识在XAML定义的字典中创建和引用的元素，x:Key在 XAML 对象元素中添加值是在资源字典中标识资源的最常见方法  -->
        <local:Human x:Key="Human" Child="ChildName" />
        <!--
            x:Shared 作用：设置false为时，修改WPF资源检索行为，以便对属性资源的请求为每个请求创建一个新实例（默认值为true，即所有请求共享同一实例）
            注意：x:Shared一定要与x:Key配合使用
        -->
        <sys:String x:Key="MyText" x:Shared="False">Hello WPF Resources123</sys:String>
    </Window.Resources>
    <StackPanel>
        <!--
            x:Name 的作用：告诉XAML编评器，当一个标签带有x:Name时除了为这个标签生成对应实例外还要为这个实例声明一个引用变量，变量名就是x:Name的值
            建议将XAML标签所对应对象的Name 属性（如果有）也设为x:Name的值，并把这个值过册到UI树上，以方便查找
            注意：对象有Name属性时Name和x:Name是可以互换的，对象没有Name属性时只能用x:Name，全部使用x:Name以增强代码的统一性和可读性
            使用x:Name后，XAML标签对应的实例就具有了自己的引用变量(类的字段)，x:FieldModifier就是用来在XAML里改变引用变量访问级别的，默认访问级别为：internal
        -->
        <Rectangle
            x:Name="Rectangle"
            Width="200"
            Height="200"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Stroke="Black">
            <!--
                使用属性元素：属性元素指的是某个非空标签的一个元素（夹在起始标签和结束标签之间的一些子级标签）对应这个标签的一个属性，
                即以元素的形式来表达一个实例的属性。
                属性元素语法的优势在属性是复杂对象时才能体现出来，比如线性渐变画刷填充矩阵代码
            -->
            <Rectangle.Fill>
                <LinearGradientBrush>
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0.2" Color="LightBlue" />
                        <GradientStop Offset="0.7" Color="LightYellow" />
                        <GradientStop Offset="1.0" Color="LightPink" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>

        <StackPanel
            Width="205"
            Height="115"
            Margin="0,10,0,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center">
            <!--
                标记扩展是一种特殊的Attribute=Value语法，Value字符串是由一对花括号及其括起来的内容组成
                使用Binding类的实例将TextBox的Text属性依赖在Slider的Value上，当Slider的滑块滑动时TextBox就会显示Slider当前的值
            -->
            <TextBox
                Height="23"
                Text="{Binding ElementName=Slider, Path=Value, Mode=OneWay}"
                TextWrapping="Wrap" />
            <Slider
                x:Name="Slider"
                Margin="0,5,0,0"
                Maximum="100"
                Value="15" />
            <TextBox
                Height="23"
                Text="{StaticResource MyText}"
                TextWrapping="Wrap" />
        </StackPanel>

        <Button
            Width="75"
            Margin="10"
            HorizontalAlignment="Center"
            VerticalAlignment="Top"
            Click="ButtonBase_OnClick"
            Content="Button" />
    </StackPanel>
</Window>